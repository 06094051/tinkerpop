////
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
////
[[collections]]
== Collections

image:gremlin-collections.png[width=400]

Lists and maps form the basis for much of the processing in Gremlin traversals. They are core to how side-effects
are typically held and how results are generally produced. Being able to pick them apart and reformat them is sometimes
required.

One of the most common ways to end up with a `Map` is with `valueMap()`:

[gremlin-groovy,modern]
----
g.V().has('name','marko').valueMap('name','age')
----

The problem is that unless the graph is making use of multi-properties, there is little need to have the value of each
property stored as a `List`. One way to unwrap this value from the list is to avoid having it there in the first place
by avoiding use of `valueMap()`:

[gremlin-groovy,modern]
----
g.V().has('name','marko').
  local(properties('name','age').
  group().by(key()).by(value()))
----

Interestingly, it's worth looking at how to process the output of `valueMap()` to attain this output as the approach is
generally applicable to processing any `Map` instances with any sorts of values:

[gremlin-groovy,modern]
----
g.V().has('name','marko').
  valueMap('name','age').
  unfold().
  group().
    by(keys).
    by(select(values).unfold())
----

The code above, basically deconstruct then reconstructs the `Map`. The key to the pattern is to first `unfold()` the
`Map` into its key and value entries. Then for each key and value produce a new `Map` using `group()` where the key
for that map is the key of the entry (those are obviously unique as you picked them out of the `valueMap()`) and the
value is simply the `unfold()` of the list of values in each entry. Recall that the `select(values).unfold()` only
returns one value (i.e. the first) not only because there is only one, but also because `by()` will only call `next()`
on that sub-traversal (it does not iterate the entire thing).

Generally speaking, a `Map` constructed as part of `group()` or `project()` will already be in the form required as
the `by()` modulators would be written in such a fashion as to produce that final output. It would be unnecessary to
deconstruct/reconstruct it. Be certain that there isn't a way to re-write the `group()` or `project()` to get the
desired output before taking this approach.