////
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
////

TinkerPop 3.1.0
===============

image::https://raw.githubusercontent.com/apache/incubator-tinkerpop/master/docs/static/images/gremlin-gangster.png[width=225]

*A 187 On The Undercover Gremlinz*

TinkerPop 3.1.0
---------------

*Release Date: NOT OFFICIALLY RELEASED YET*

Additional upgrade information can be found here:

* <<_tinkerpop_3_0_2,TinkerPop 3.0.2>>
* <<_tinkerpop_3_0_1,TinkerPop 3.0.1>>

Important Changes
~~~~~~~~~~~~~~~~~

* The Gephi Plugin has improved integration with Gephi, where manually inserting {{store}} steps to visualize a running traversal is no longer required.
* Entire TinkerGraph instances can be serialized over Gryo.

Please see the link:https://github.com/apache/incubator-tinkerpop/blob/3.1.0-incubating/CHANGELOG.asciidoc#XXXXXXXXXXXXXXXXXXXXXXXXXXXX[changelog] for a complete list of all the modifications that are part of this release.

Upgrading for Users
~~~~~~~~~~~~~~~~~~~

Gremlin Structure
^^^^^^^^^^^^^^^^^

Transaction.close() Default Behavior
++++++++++++++++++++++++++++++++++++

The default behavior of `Transaction.close()` is to rollback the transaction.  This is in contrast to previous versions
where the default behavior was commit.  Using rollback as the default should be thought of as a like a safer approach
to closing where a user must now explicitly call `commit()` to persist their mutations.

See link:https://issues.apache.org/jira/browse/TINKERPOP3-805[TINKERPOP3-805] for more information.

Transaction.onReadWrite() and Transaction.onClose() are now `ThreadLocal` settings
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The `Transaction.onReadWrite()` and `Transaction.onClose()` settings now need to be set for each thread (if another behavior than the default is desired).
For gremlin-server users that may be changing these settings via scripts :
If the settings are changed from a sessionless request they will now only apply to that one request.
If the settings are changed from an in-session request they will now only apply to all future requests made in the scope of that session. 


Upgrading for Providers
~~~~~~~~~~~~~~~~~~~~~~~

Graph System Providers
^^^^^^^^^^^^^^^^^^^^^^

Transaction.close() Default Behavior
++++++++++++++++++++++++++++++++++++

The default behavior for `Transaction.close()` is to rollback the transaction and is enforced by tests, which
previously asserted the opposite (i.e. commit on close).  These tests have been renamed to suite the new semantics:

* `shouldCommitOnCloseByDefault` became `shouldCommitOnCloseWhenConfigured`
* `shouldRollbackOnCloseWhenConfigured` became `shouldRollbackOnCloseByDefault`

If these tests were referenced in an `OptOut`, then their names should be updated.

See link:https://issues.apache.org/jira/browse/TINKERPOP3-805[TINKERPOP3-805] for more information.

Driver Implementers
^^^^^^^^^^^^^^^^^^^

Transaction.onReadWrite() and Transaction.onClose() are now `ThreadLocal` settings
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

If your driver configures the `Transaction.onReadWrite()` or `Transaction.onClose()` settings, note that these no longer apply to all future requests. 
If the settings are changed from a sessionless request they will only apply to that one request.
If the settings are changed from an in-session request they will only apply to all future requests made in the scope of that session. 
