////
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
////
Getting Started
===============

Apache TinkerPop is an open source Graph Computing Framework.  Within itself, TinkerPop represents a large collection
of capabilities and technologies and in its wider ecosystem an additionally extended world of
link:http://tinkerpop.incubator.apache.org/#graph-systems[third-party contributed] graph libraries and systems.
TinkerPop's ecosystem can appear complex to newcomers of all experience, especially when glancing at the
link:http://tinkerpop.incubator.apache.org/docs/x.y.z/index.html[reference documentation] for the first time.

So, where do you get started with TinkerPop?

In Five Minutes
---------------

It is quite possible to learn a lot in just five minutes with TinkerPop, but before doing so, introductions are in
order.  Meet Gremlin, the most recognizable citizen of The TinkerPop!

image:gremlin-standing.png[width=125,align=center]

Gremlin helps you navigate the vertices and edges of a graph. He is essentially your query language to graph
databases, as link:http://sql2gremlin.com/[SQL] is the query language to relational databases.  To tell Gremlin how
he should "traverse" the graph (i.e. what you want your query to do) you need a way to provide him commands in the
language he understands - and, of course, that language is called "Gremlin".  For this task, you need one of
TinkerPop's most important tools: the link:http://tinkerpop.incubator.apache.org/docs/x.y.z/#gremlin-console[Gremlin Console].

Download the console, unpackage it and start it:

[source,text]
----
curl -L -O https://www.apache.org/dist/incubator/tinkerpop/x.y.z/apache-gremlin-console-x.y.z-bin.zip
unzip apache-gremlin-console-x.y.z-bin.zip
cd apache-gremlin-console-x.y.z-bin.zip
$ bin/gremlin.sh

         \,,,/
         (o o)
-----oOOo-(3)-oOOo-----
plugin activated: tinkerpop.server
plugin activated: tinkerpop.utilities
plugin activated: tinkerpop.tinkergraph
gremlin>
----

TIP: Windows users may use the included `bin/gremlin.bat` file to start the Gremlin Console.

The Gremlin Console is a link:http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop[REPL environment],
which provides a nice way to learn Gremlin as you get immediate feedback for the code that you enter. This eliminates
the more complex need to "create a project" to try things out. The console is not just for "getting started" however.
You will find yourself using it for a variety of TinkerPop-related activities, such as loading data, administering
graphs, working out complex traversals, etc.

To get Gremlin to traverse a graph, you need a `Graph` instance, which holds the
link:http://tinkerpop.incubator.apache.org/docs/x.y.z/#_the_graph_structure[structure] and data of the
graph.  TinkerPop is an graph abstraction layer over different graph databases and different graph processors, so there
are many `Graph` instances you can choose from to instantiate in the console.  The best `Graph` instance to start with
however, is link:http://tinkerpop.incubator.apache.org/docs/x.y.z/#tinkergraph-gremlin[TinkerGraph].  TinkerGraph
is a fast, in-memory graph database with a small handful of configuration options, making it a good choice for beginners.

TIP: TinkerGraph is not just a toy for beginners.  It is useful in analyzing subgraphs taken from a large graph,
trying out, working with a static graph that doesn't change much, unit tests and other use cases where the graph
can fit in memory.

TIP: Resist the temptation to "get started" with more complex databases like link:http://thinkaurelius.github.io/titan/[Titan]
or worrying how to get link:http://tinkerpop.incubator.apache.org/docs/x.y.zg/#gremlin-server[Gremlin Server]
working properly.  Focusing on the basics builds a good foundation for all the other things TinkerPop offers.

To make your process even easier, start with one of TinkerPop's toy graphs.  These are "small" graphs designed to
provide a quick start into querying.  It is good to get familiar with them as almost all TinkerPop documentation is based
on them and when you need help and have to come to the link:http://groups.google.com/group/gremlin-users[mailing list],
a failing example put in the context of the toy graphs can usually get you a fast answer to your problem.

For your first graph, use the "Modern" graph which looks like this:

image:tinkerpop-modern.png[width=500]

It can be instantiated in the console this way:

[gremlin-groovy]
----
graph = TinkerFactory.createModern()
g = graph.traversal()
----

The first command creates a `Graph` instance named `graph`, which thus provides a reference to the data you want
Gremlin to traverse. Unfortunately, just having `graph` doesn't provide Gremlin enough context to do his job.  You
also need something called a `TraversalSource`, which is generated by the second command.  The `TraversalSource`
provides additional information (such as link:http://tinkerpop.incubator.apache.org/docs/x.y.z/#traversalstrategy[traversal strategies]
and link:http://tinkerpop.incubator.apache.org/docs/x.y.z/#graphcomputer[traversal engine]) to Gremlin with respect
to how he should execute his trip around the `Graph`.

With your `TraversalSource` `g` available it is now possible to ask Gremlin to traverse the `Graph`:

[gremlin-groovy,modern]
----
g.V() <1>
g.V(1) <2>
g.V(1).values('name') <3>
g.V(1).outE('knows') <4>
g.V(1).outE('knows').inV().values('name') <5>
g.V(1).out('knows').values('name') <6>
g.V(1).out('knows).has('age',gt,30).values('name') <7>
----

<1> Get all the vertices in the `Graph`.
<2> Get a vertex with the unique identifier of "1".
<3> Get the value of the `name` property on vertex with the unique identifier of "1".
<4> Get the edges with the label "knows" for the vertex with the unique identifier of "1".
<5> Get the names of the people that the vertex with the unique identifier of "1" "knows".
<6> Note that when one uses `outE().inV()` as shown in the previous command, this can be shortened to just `out()`
(similar to `inE().inV()` and `in` for incoming edges).
<7> Get the names of the people vertex "1" knows who are over the age of 30.

In this first five minutes with Gremlin, you've gotten the Gremlin Console installed, instantiated a `Graph`, wrote
some traversals and hopefully learned something about TinkerPop in general.  You've only scratched the surface of
what there is to know, but those accomplishments will help enable understanding of the more detailed tutorials to
come.
