#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

### BEGIN INIT INFO
# Provides:          gremlin-server
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Gremlin Server
# Description:       Apache Tinkerpop Gremlin Server
# chkconfig:         2345 98 01
### END INIT INFO

[[ -n "$DEBUG" ]] && set -x

SOURCE="$0"
while [ -h "$SOURCE" ]; do
  cd -P "$( dirname "$SOURCE" )" || exit 1
  DIR="$(pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
cd -P "$( dirname "$SOURCE" )" || exit 1
GREMLIN_BIN="$(pwd)"

GREMLIN_CONF=$GREMLIN_BIN/gremlin-server.conf

[[ -r $GREMLIN_CONF ]] && source $GREMLIN_CONF
[[ -n "$DEBUG" ]] && set -x

if [ -z "$GREMLIN_HOME" ]; then
  cd ..
  GREMLIN_HOME="$(pwd)"
fi

GREMLIN_CMD=$GREMLIN_HOME/bin/gremlin-server.sh

if [ -z "$LOG_DIR" ] ; then
  LOG_DIR="$GREMLIN_HOME/logs"
fi

if [ ! -d "$LOG_DIR" ]; then
  echo LOG_DIR $LOG_DIR does not exist
  exit 1
fi

if [ -z "$LOG_FILE" ]; then
  LOG_FILE="$LOG_DIR/gremlin.log"
fi

if [ -z "$PID_DIR" ] ; then
  PID_DIR="$GREMLIN_HOME/run"
fi

if [ ! -d "$PID_DIR" ]; then
  echo PID_DIR $PID_DIR does not exist
  exit 1
fi

if [ -z "$PID_FILE" ]; then
  PID_FILE=$PID_DIR/gremlin.pid
fi

if [ -z "$GREMLIN_YAML" ]; then
  GREMLIN_YAML=$GREMLIN_HOME/conf/gremlin-server.yaml
fi

if [ ! -r "$GREMLIN_YAML" ]; then
  # try relative to home
  GREMLIN_YAML="$GREMLIN_HOME/$GREMLIN_YAML"
  if [ ! -r "$GREMLIN_YAML" ]; then
    echo WARNING: $GREMLIN_YAML is unreadable
  fi
fi

status() {
  if [ -r "$PID_FILE" ] ; then
    PID=$(cat "$PID_FILE")
    ps -p "$PID" &> /dev/null
    RUNNING=$?
    if [ $RUNNING -gt 0 ]; then
      echo Server not running
    else
      echo Server running with PID $(cat "$PID_FILE")
    fi
  else
    echo Server not running or PID file not found.
  fi
}

stop() {
  if [ -r "$PID_FILE" ] ; then
    PID=$(cat "$PID_FILE")
    ps -p "$PID" &> /dev/null
    RUNNING=$?
    if [ $RUNNING -gt 0 ]; then
      echo Server not running
    else
      kill "$PID" &> /dev/null || { echo "Unable to kill server [$PID]"; exit 1; }
      for i in $(seq 1 60); do
        ps -p "$PID" &> /dev/null || { echo "Server stopped [$PID]"; rm -f "$PID_FILE"; return 0; }
        [[ $i -eq 30 ]] && kill "$PID" &> /dev/null
        sleep 1
      done
      echo "Unable to kill server [$PID]";
      exit 1;
    fi
  else
    echo Server not running or PID file not found.
  fi
  rm -f "$PID_FILE"
}

start() {

  if [ -r "$PID_FILE" ] ; then
    PID=$(cat "$PID_FILE")
    ps -p "$PID" &> /dev/null
    RUNNING=$?
    if [ $RUNNING -eq 0 ]; then
      echo Server already running with PID $(cat "$PID_FILE").
      exit 1
    fi
  fi

  if [ -z "$RUNAS" ]; then
    JAVA_HOME="$JAVA_HOME" JAVA_OPTIONS="$JAVA_OPTIONS" $GREMLIN_CMD "$GREMLIN_YAML" >> "$LOG_FILE" 2>&1 &
    PID=$!
    disown $PID
    echo $PID > "$PID_FILE"
  else
    su -c "JAVA_HOME=\"$JAVA_HOME\" JAVA_OPTIONS=\"$JAVA_OPTIONS\" $GREMLIN_CMD \"$GREMLIN_YAML\" >> \"$LOG_FILE\" 2>&1 & echo \$! "  "$RUNAS" > "$PID_FILE"
    chown "$RUNAS" "$PID_FILE"
  fi

}

case "$1" in
  status)
    status
    ;;
  restart)
    stop
    start
    ;;
  start)
    start
    ;;
  stop)
    stop
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"; exit 1;
    ;;
esac
