<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~  Licensed to the Apache Software Foundation (ASF) under one
  ~  or more contributor license agreements.  See the NOTICE file
  ~  distributed with this work for additional information
  ~  regarding copyright ownership.  The ASF licenses this file
  ~  to you under the Apache License, Version 2.0 (the
  ~  "License"); you may not use this file except in compliance
  ~  with the License.  You may obtain a copy of the License at
  ~
  ~  http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.apache.tinkerpop</groupId>
        <artifactId>tinkerpop</artifactId>
        <version>3.2.1-SNAPSHOT</version>
    </parent>
    <artifactId>gremlin-python</artifactId>
    <name>Apache TinkerPop :: Gremlin Python</name>
    <dependencies>
        <dependency>
            <groupId>org.apache.tinkerpop</groupId>
            <artifactId>gremlin-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy</artifactId>
            <version>${groovy.version}</version>
            <classifier>indy</classifier>
        </dependency>
        <dependency>
            <groupId>org.python</groupId>
            <artifactId>jython-standalone</artifactId>
            <version>2.7.1b2</version>
        </dependency>
        <!-- TESTING -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tinkerpop</groupId>
            <artifactId>tinkergraph-gremlin</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tinkerpop</groupId>
            <artifactId>gremlin-test</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tinkerpop</groupId>
            <artifactId>gremlin-server</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <directory>${basedir}/target</directory>
        <finalName>${project.artifactId}-${project.version}</finalName>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources
                </directory>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>${basedir}/src/test/resources
                </directory>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <executions>
                    <execution>
                        <id>generatePython</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>org.apache.tinkerpop.gremlin.python.GenerateGremlinPython</mainClass>
                            <arguments>
                                <argument>${basedir}/src/main/jython/gremlin_python/traversal.py</argument>
                                <argument>${basedir}/src/main/jython/gremlin_python/graph_traversal.py</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>buildPython</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>python</executable>
                            <async>true</async>
                            <workingDirectory>${basedir}/src/main/jython</workingDirectory>
                            <commandlineArgs>setup.py build --build-lib ${project.build.testOutputDirectory}/Lib
                            </commandlineArgs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.gmavenplus</groupId>
                <artifactId>gmavenplus-plugin</artifactId>
                <version>1.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>addSources</goal>
                            <goal>addTestSources</goal>
                            <goal>generateStubs</goal>
                            <goal>compile</goal>
                            <goal>testGenerateStubs</goal>
                            <goal>testCompile</goal>
                            <goal>removeStubs</goal>
                            <goal>removeTestStubs</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <invokeDynamic>true</invokeDynamic>
                </configuration>
            </plugin>
            <plugin>
                <groupId>net.sf.mavenjython</groupId>
                <artifactId>jython-compile-maven-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jython</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>pythonDependencies</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>jython</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.testOutputDirectory}</outputDirectory>
                            <libraries>
                                <param>aenum</param>
                                <param>requests</param>
                            </libraries>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <python.home>${project.build.testOutputDirectory}</python.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>${basedir}/src/main/jython/gremlin_rest_driver</directory>
                            <includes>
                                <include>**/*.pyc</include>
                                <include>**/*.class</include>
                            </includes>
                            <excludes>
                                <exclude>**/*.py</exclude>
                            </excludes>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                        <fileset>
                            <directory>${basedir}/src/main/jython/gremlin_driver</directory>
                            <includes>
                                <include>**/*.pyc</include>
                                <include>**/*.class</include>
                            </includes>
                            <excludes>
                                <exclude>**/*.py</exclude>
                            </excludes>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                        <fileset>
                            <directory>${basedir}/src/main/jython/gremlin_python</directory>
                            <includes>
                                <include>**/*.pyc</include>
                                <include>**/*.class</include>
                            </includes>
                            <excludes>
                                <exclude>**/*.py</exclude>
                            </excludes>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!--
        Provides a way to deploy the gremlinpython GLV to pypi. Requires installation of pip/virtualenv. See the
        developer docs for more information on how to configure these settings to get this profile to work. The profile
        largely uses antrun to execute raw pip/twine/python commands against a copy of what's in the jython directory
        which is copied to target/py.
        -->
        <profile>
            <id>glv-python</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>glvPython</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <!-- copy files in jython directory to target/py and run virtual env to sandbox python -->
                            <execution>
                                <id>setup-py-env</id>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <tasks>
                                        <mkdir dir="${project.build.directory}/py/env"/>
                                        <copy todir="${project.build.directory}/py">
                                            <fileset dir="src/main/jython"/>
                                        </copy>
                                        <exec dir="${project.build.directory}/py" executable="virtualenv"
                                              failonerror="true">
                                            <arg line="env"/>
                                        </exec>
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <!--
                            build/package python source distribution and wheel archive. the version is bound to an
                            environment variable that gets used in setup.py to dynamically construct a module
                            __version__file
                             -->
                            <execution>
                                <id>package-py</id>
                                <phase>package</phase>
                                <configuration>
                                    <tasks>
                                        <exec dir="${project.build.directory}/py" executable="env/bin/python"
                                              failonerror="true">
                                            <env key="VERSION" value="${project.version}"/>
                                            <arg line="setup.py sdist"/>
                                        </exec>
                                        <exec dir="${project.build.directory}/py" executable="env/bin/python"
                                              failonerror="true">
                                            <env key="VERSION" value="${project.version}"/>
                                            <arg line="setup.py bdist_wheel"/>
                                        </exec>
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <!-- deploy to pypi. assumes that ~/.pypirc is configured appropriately -->

                            <execution>
                                <id>deploy-py</id>
                                <phase>deploy</phase>
                                <configuration>
                                    <tasks>
                                        <exec dir="${project.build.directory}/py" executable="env/bin/pip"
                                              failonerror="true">
                                            <arg line="install twine"/>
                                        </exec>
                                        <exec dir="${project.build.directory}/py" executable="env/bin/twine"
                                              failonerror="true">
                                            <arg line="upload dist/* -r pypitest"/>
                                        </exec>
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>